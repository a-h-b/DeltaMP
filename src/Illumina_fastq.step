# Define Variables
while read var val; do unset $var ; if [[ $val == "(["* ]]; then declare -A $var="`echo $val | sed 's/].\"/]=\"/g'`" ; else declare $var="$val" ; fi ; done < config/env.txt
. $BIN/check_previous_step

# load modules
module load DeltaMP/${VERSION[DELTAMP]}

# Library to analyse
read LIB_NAME FWD_SUF RVS_SUF <<<`sed -n ${ARRAY_TASK}'p' config/lib2.list`
FWD_LIB=${LIB_NAME}${FWD_SUF%.*}
RVS_LIB=${LIB_NAME}${RVS_SUF%.*}
cd libraries

# Extract reads with valid forward and/or reverse primer
for i in FWD_REGEX RVS_REGEX
do
	j=${i%_*}
	declare $i=${!j}
	while read A B
	do
		declare $i="`echo ${!i} | sed "s/$A/$B/g"`"
	done < <(awk '{print toupper($0)}' $BIN/IUPAC.txt)
done

FWDSIM=`awk -v F=${#FWD} -v D=$PDIFFS 'BEGIN{printf "%.2g\n", 1-D/F}'`
RVSSIM=`awk -v R=${#RVS} -v D=$PDIFFS 'BEGIN{printf "%.2g\n", 1-D/R}'`
sumaclust -t $FWDSIM -e -O $FWD_LIB.suma.map <(obicut -b 1 -e ${#FWD} --fasta-output $FWD_LIB.fastq | sed 's/_SUB sub.*$//;/^>/!s/n/a/g') | obigrep -a cluster_center:True | obisort -k cluster_weight -r | obiannotate -C > $FWD_LIB.suma.fasta
sumaclust -t $RVSSIM -e -O $RVS_LIB.suma.map <(obicut -b 1 -e ${#RVS} --fasta-output $RVS_LIB.fastq | sed 's/_SUB sub.*$//;/^>/!s/n/a/g') | obigrep -a cluster_center:True | obisort -k cluster_weight -r | obiannotate -C > $RVS_LIB.suma.fasta
cat <(grep "$(grep -m 1 -B 1 -i $FWD_REGEX $FWD_LIB.fastq | awk 'NR==1{sub("@","");print $1}')" $FWD_LIB.suma.map) <(grep "$(grep -m 1 -B 1 -i $RVS_REGEX $RVS_LIB.fastq  | awk 'NR==1{sub("@","");print $1}')" $RVS_LIB.suma.map) | cut -f 2- | tr "\t" "\n" | sort -u > $LIB_NAME.primer.accnos
obigrep --uppercase --id-list=$LIB_NAME.primer.accnos $FWD_LIB.fastq | sed 's/  / /' > fastq/$LIB_NAME.$FWD_NAME.fastq
obigrep --uppercase --id-list=$LIB_NAME.primer.accnos $RVS_LIB.fastq | sed 's/  / /' > fastq/$LIB_NAME.$RVS_NAME.fastq
# better use cutadapt

# Convert to fasta + qual and raw reads stat
mothur "#set.dir(input=fastq, output=fasta);
	fastq.info(fastq=$LIB_NAME.$FWD_NAME.fastq);
	fastq.info(fastq=$LIB_NAME.$RVS_NAME.fastq)"
awk '$0!~"^>"{sum=0;for(i=1;i<=NF;i++){sum+=$i};print int(sum/NF)}' fasta/$LIB_NAME.$FWD_NAME.qual > raw_stat/$LIB_NAME.fwd.meanqual
awk '$0!~"^>"{for(i=1;i<=NF;i++){sum[i]+=$i;nb[i]+=1}}END{for(i=1;sum[i];i++){print int(sum[i]/nb[i])}}' fasta/$LIB_NAME.$FWD_NAME.qual > raw_stat/$LIB_NAME.fwd.meanposqual
awk '$0!~"^>"{sum=0;for(i=1;i<=NF;i++){sum+=$i};print int(sum/NF)}' fasta/$LIB_NAME.$RVS_NAME.qual > raw_stat/$LIB_NAME.rvs.meanqual
awk '$0!~"^>"{for(i=1;i<=NF;i++){sum[i]+=$i;nb[i]+=1}}END{for(i=1;sum[i];i++){print int(sum[i]/nb[i])}}' fasta/$LIB_NAME.$RVS_NAME.qual > raw_stat/$LIB_NAME.rvs.meanposqual

# primer logo
obisample -s 10000 fasta/$LIB_NAME.$FWD_NAME.fasta | obicut -b 1 -e ${#FWD} > fasta/$LIB_NAME.sample.forward
obisample -s 10000 fasta/$LIB_NAME.$RVS_NAME.fasta | obicut -b 1 -e ${#RVS} > fasta/$LIB_NAME.sample.reverse
weblogo -c classic -t "$LIB_NAME forward primer $FWD_NAME" < fasta/$LIB_NAME.sample.forward > raw_stat/weblogo.$LIB_NAME.forward.eps
weblogo -c classic -t "$LIB_NAME reverse primer $RVS_NAME" < fasta/$LIB_NAME.sample.reverse > raw_stat/weblogo.$LIB_NAME.reverse.eps

rm fasta/$LIB_NAME.sample* fasta/$LIB_NAME.$FWD_NAME.fasta fasta/$LIB_NAME.$FWD_NAME.qual fasta/$LIB_NAME.$RVS_NAME.fasta fasta/$LIB_NAME.$RVS_NAME.qual

# list files and directories
. $BIN/list_step_files.sh

echo END



