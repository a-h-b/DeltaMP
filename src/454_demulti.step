# Define Variables
while read var val; do unset $var ; if [[ $val == "(["* ]]; then declare -A $var="`echo $val | sed 's/].\"/]=\"/g'`" ; else declare $var="$val" ; fi ; done < config/env.txt
. $BIN/check_previous_step

# load modules
module load DeltaMP/${VERSION[DELTAMP]}

#Define the library to demultiplex
LIB_NAME=`head -$ARRAY_TASK config/lib2.list | tail -1 | sed 's/\.sff//'`
cd libraries
mkdir demultiplex
cd demultiplex 
mv ../fasta/oligos.$LIB_NAME ./

#Define barcode difference allowed for the library
if [ $BDIFFS == "a" ]
then
	unset BDIFFS
	BDIFFS=`barcode_mismatch_check.sh oligos.$LIB_NAME`
	NBMID=`grep -c "barcode" oligos.$LIB_NAME`
	echo "$LIB_NAME $BDIFFS $NBMID" >> ../../processing/bdiffs.$SUBPROJECT
fi

#Split library over the different samples
mothur "#set.dir(input=../, output=./);
sffinfo(sff=$LIB_NAME.sff);
set.dir(input=./, output=./);
trim.seqs(fasta=current, oligos=oligos.$LIB_NAME, bdiffs=$BDIFFS, pdiffs=$((${#FWD} / 3)), minlength=1, maxlength=1000, maxambig=50, maxhomop=20, processors=$NCPUS)"

# create list of sequences to extract from main sff and oligo file per sample
cut -f 2 $LIB_NAME.groups | sort | uniq > $LIB_NAME.groups.list
while read group
do
	mkdir $group.$LIB_NAME
	awk -v G=$group '$2==G{print $1}' $LIB_NAME.groups > $group.$LIB_NAME/$group.$LIB_NAME.txt
	awk -v G=$group 'NR<=2{print $0} ; $3==G{print $0}' oligos.$LIB_NAME > ../fasta/oligos.$group.$LIB_NAME
done < $LIB_NAME.groups.list

# make per sample sff
parallel -a $LIB_NAME.groups.list -j $NCPUS "make_per_library_sff.py -i ../$LIB_NAME.sff -l {}.$LIB_NAME"

# move demultiplexed sff in sff directory
parallel -a $LIB_NAME.groups.list -j $NCPUS "dd if={}.$LIB_NAME/{}.$LIB_NAME.sff of=../$RAW_EXT/{}.$LIB_NAME.sff bs=1M"
parallel -a $LIB_NAME.groups.list -j $NCPUS "rm -r {}.$LIB_NAME"

# list files and directories
. $BIN/list_step_files.sh

echo END
