# Define Variables
while read var val; do unset $var ; if [[ $val == "(["* ]]; then declare -A $var="`echo $val | sed 's/].\"/]=\"/g'`" ; else declare $var="$val" ; fi ; done < config/env.txt
. $BIN/check_previous_step

# load modules
module load DeltaMP/${VERSION[DELTAMP]}

# check database presence
cd $DBFOLD
if [ -f $DBCUT.fasta ] && [ -f $DBCUT.taxonomy ]
then
	if [ -z $DBCHOP ]
	then
		echo "The database $DBCUT.fasta already exist."
		echo "END"
		exit 0
	else
		if [ -f $DBCHOP.fasta ]
		then
			echo "The database $DBCUT.fasta and $DBCHOP.fasta already exist."
			echo "END"
			exit 0
		fi
	fi
fi


# Primers
unset PRIMER
declare -A PRIMER
if [ $TECH == "454" ]
then
	if [ $FLIP == "true" ]
	then
		read FWD RVS <<<"$RVS $FWD"
		read FWD_NAME RVS_NAME <<<"$RVS_NAME $FWD_NAME"
	fi
fi
PRIMER[$FWD_NAME]=${FWD,,}
PRIMER[$RVS_NAME]=${RVS,,}
PRIMER[$FWD_NAME.rc]=`echo ">a ${PRIMER[$FWD_NAME]}" | tr " " "\n" | obicomplement | grep -v ">"`
PRIMER[$RVS_NAME.rc]=`echo ">a ${PRIMER[$RVS_NAME]}" | tr " " "\n" | obicomplement | grep -v ">"`
echo "Used primers are:"
cat <(echo ${!PRIMER[@]}) <(echo ${PRIMER[@]}) | column -t


# Modified primer with IUPAC for the 12 last nt only
declare -A PRIMER_I
for i in "${!PRIMER[@]}"
do
	TMP=`echo ${PRIMER[$i]: -12} | sed 's/\(.\)/\1-*/g;s/-\*$//'`
	while read A B
	do
		TMP=`echo $TMP | sed "s/$A/$B/g"`
	done < $BIN/IUPAC.txt
	PRIMER_I[$i]=$TMP
done
echo "Used primers with IUPAC and gap allowed"
cat <(echo ${!PRIMER_I[@]}) <(echo ${PRIMER_I[@]}) | column -t

# cutadapt for non-aligned version (1 mismatch allowed)
mkdir $DBCUT.temp
cd $DBCUT.temp
FWD_E=$(awk -v F=${#FWD} 'BEGIN{printf "%.2f",1/F+0.005}')
RVS_E=$(awk -v F=${#RVS} 'BEGIN{printf "%.2f",1/F+0.005}')
twofasta $DBFOLD/$DB.fasta | cutadapt -g ${FWD} -e ${FWD_E} --no-indels --trimmed-only - | cutadapt -a ${PRIMER[$RVS_NAME.rc]} -e ${RVS_E} --no-indels --trimmed-only - > $DBCUT.cut.fasta

# clean (remove sequences with n's, longer than 800 nt, with a taxonomic path with less than 3 ranks and containing the primer sequence internaly) and annotate for obitools (at genus level for 16S)
PRIMER_REG=$(for i in ${PRIMER[@]}; do TMP=$i ; while read A B; do TMP=`echo $TMP | sed "s/$A/$B/g"` ; done < $BIN/IUPAC.txt ; echo $TMP ; done)
paste - - < $DBCUT.cut.fasta | sort -k 1,1 | join <(sort -k 1,1 $DBFOLD/$DB.taxonomy | sed 's/^/>/;s/;$//;s/;/|/g') - | awk '{rank=split($2,a,"|");print $1,"ranks="rank"; taxo="$2";\n"$3}' | obigrep -p 'ranks>2' -L 800 -s '^[atcg]*$' | obigrep -v -s $(echo $PRIMER_REG | sed 's/ /|/g') | twofasta > $DBCUT.taxo.fasta

# dereplicate with prefix option and find LCA for unique reads from different taxonomic paths; remove if LCA have less than 3 taxonomic ranks
obiuniq -p -m taxo $DBCUT.taxo.fasta > $DBCUT.uniq.fasta
grep "^>" $DBCUT.uniq.fasta | sed "s/^\(>[^ ]*\) .*taxo={\([^}]*\)}.*$/\1 \2/;s/'//g;s/: *[0-9][0-9]*//g;s/,* /\n/g" > taxo.list

declare -A MAX_RANKS
while read taxo rank
do
	MAX_RANKS[$taxo]=$rank
done < <(grep -v "^>"  taxo.list | sort -t '|' -k 2,2 | awk '{len=split($1,a,"|"); if(NR==1){prev=a[2];max=len} else {if(a[2]==prev){if(max<len){max=len}} else {print prev,max;prev=a[2];max=len}}}END{print prev,max}')

lca () { awk '{for(i=1;i<=NF;i++){a[NR,i]=$i}} END {for(i=1;i<=NF;i++){sum=0;split("",b);for(j=1;j<=NR;j++){sum+=!b[a[j,i]]++};if(sum==1){printf "%s|", a[1,i]} else break}}' | sed 's/|[| ]*$/\n/' ; }
export -f lca

lca_ck () {
	while read -a line
	do
		if [ ${#line[@]} -gt 2 ]
		then
			LCA=$(echo ${line[@]} | tr " " "\n" | sed '1d;s/|/ /g' | lca)
			TAXO=$LCA
			RANKS=$(echo ${TAXO//|/ } | wc -w)
			FLAG="yes"
		else
			TAXO=${line[1]}
			RANKS=$(echo ${TAXO//|/ } | wc -w)
			FLAG="no"
			RANK2=$(echo $TAXO | cut -d "|" -f 2 )
			if [ $RANKS -gt 6 ] && [ $RANKS -ge $(( ${MAX_RANKS[$RANK2]} - 2 )) ]
			then
				LCA=${TAXO%|*}
			else
				LCA=$TAXO
			fi
		fi
		if [ $RANKS -ge 3 ]
		then
			CKS=($(echo $LCA | cksum))
			echo "${line[0]} ranks=${RANKS}; taxo=${TAXO}; cksum=${CKS[0]}; lca=${FLAG};"
		fi
	done < <(awk '{if(NR==1){printf "%s",$1} else {if($1~"^>"){printf "\n%s",$1} else printf " %s",$1}}END{printf "\n"}' $@)
}
export -f lca_ck
cat taxo.list | parallel -j $NCPUS --block 100k --recstart '>' --pipe -k lca_ck {} > taxo.ck.list 
sed 's/^.*\(cksum=[0-9]*;\).*$/\1/' taxo.ck.list | sort | uniq -c | awk '{print $2" size="$1";"}' | sort -k 1,1 | join -2 4 - <(sort -k 4,4 taxo.ck.list) | sort -k 3,3 | join -1 3 - <(awk '{if($1~"^>"){printf "%s", $1} else printf " %s\n", $1}' $DBCUT.taxo.fasta | sort -k 1,1) | awk '{print $1,$2,$3,$4,$5,$6"\n"$7}' > $DBCUT.uniq_ck.fasta

# split based on sequences sharing same taxonomic path (full path if less than 7 ranks and less than x ranks, x being the maximum number of ranks inside a phylum, else last rank (~ species level) removed from full path)
mkdir $DBCUT.preclust
cd  $DBCUT.preclust
obigrep -p 'size>1' ../$DBCUT.uniq_ck.fasta | obiannotate --length | obisplit -t cksum
cd ..
obigrep -p 'size==1' $DBCUT.uniq_ck.fasta > $DBCUT.end.fasta

# precluster sequences with same taxonomic path (99 % similarity, longest read as reference)
get_preclust() {
	file=$1
	obisort --without-progress-bar -r -k seq_length $file > ${file%.*}.sort
	DIFFS=$(tac ${file%.*}.sort | grep -m 1 "^>" | sed -n 's/^.*seq_length=\([0-9]*\);.*$/\1/p' | awk '{print int($1/100)}')
	awk '$1~"^>"{sub(">","",$1);print $1"\t"$1}' ${file%.*}.sort > ${file%.*}.names
	mothur "#set.logfile(name=${file%.*}.log);	pre.cluster(fasta=${file%.*}.sort, name=${file%.*}.names, diffs=$DIFFS)" > /dev/null 2>&1
	rm ${file%.*}.[snl]* ${file%.*}.precluster.map
}
export -f get_preclust
parallel -j $NCPUS get_preclust {} ::: $DBCUT.preclust/[0-9]*.fasta

# compute LCA for preclustered reads when needed
awk '{len=split($2,a,",");if(len>1){for(i in a){print $1,">"a[i]}}}' $DBCUT.preclust/[0-9]*.precluster.names | sort -k 2,2 | join -1 2 - <(sort -k 1,1 taxo.ck.list) | sed 's/>[^ ]* \([^ ]*\) .*taxo=\([^;]*\);.*$/>\1 \2/' | sort -k1,1 | awk '{if(NR==1){prev=$1;print $1"\n"$2} else {if($1==prev){print $2} else {prev=$1;print $1"\n"$2}}}' > preclust.list
cat preclust.list | parallel -j $NCPUS --block 100k --recstart '>' --pipe -k lca_ck {} | sed 's/$/ preclust=yes;/' > preclust.ck.list 
cat <(cat $DBCUT.preclust/[0-9]*.precluster.sort | obigrep --id-list=<(cat preclust/[0-9]*.precluster.names | awk '{len=split($2,a,",");if(len==1) print $1}') | obiannotate -S preclust:no) <(cat $DBCUT.preclust/[0-9]*.precluster.sort | obigrep --id-list=<(awk '{sub(">","",$1);print $1}' preclust.ck.list) | awk '{if(NR==1){printf "%s ",$1} else {if($1~"^>"){printf "\n%s ",$1} else printf "%s",$1}}END{printf "\n"}' | sort -k 1,1 | paste - preclust.ck.list | awk '{printf "%s",$1;for(i=4;i<=NF;i++){printf " %s",$i};printf "\n%s\n",$2}') >> $DBCUT.end.fasta
rm -r $DBCUT.preclust

# final DB
awk '{if(NR==1){printf "%s\n",$1} else {if($1~"^>"){printf "\n%s\n",$1} else printf "%s",toupper($1)}}END{printf "\n"}' $DBCUT.end.fasta > $DBFOLD/$DBCUT.fasta
sed -n 's/^>\([^ ]*\) .*taxo=\([^;]*;\).*$/\1\t\2/;s/|/;/gp;s/(\(.*\))/|\1|/g' $DBCUT.end.fasta > $DBFOLD/$DBCUT.taxonomy

# Initialize mothur database
obihead -n 10 $DBFOLD/$DBCUT.fasta > tmp.$DBCUT.fasta
mothur "#set.dir(output=./, tempdefault=$DBFOLD);
set.logfile(name=mothur.initialize.logfile);
classify.seqs(fasta=tmp.$DBCUT.fasta, template=$DBCUT.fasta, taxonomy=$DBCUT.taxonomy, cutoff=80, method=wang)"
rm tmp.*

# Format to vsearch database
sed '$!N;/>/s/\n/ /;s/>//' $DBFOLD/$DBCUT.fasta | sort -k 1,1 | join - <(sort -k 1,1 $DBFOLD/$DBCUT.taxonomy) | sed 's/;$//;s/;/,/g' | awk '{print ">"$1";tax="$3";\n"$2}' > vsearch.$DBCUT.fasta
vsearch --makeudb_usearch vsearch.$DBCUT.fasta --output $DBFOLD/$DBCUT.udb

# Cut align database
if [[ $DB == *"silva"* ]]
then
	if [ -f $DBFOLD/$DBALIGN.fasta ]
	then
		CUT_POS=(`grep -m 1 ${PRIMER_I[$FWD_NAME]}.*${PRIMER_I[$RVS_NAME.rc]} $DBFOLD/$DBALIGN.fasta | awk -v F=${PRIMER_I[$FWD_NAME]} -v R=${PRIMER_I[$RVS_NAME.rc]} '{match($1,F);print RSTART+RLENGTH;match($1,R);print RSTART-1}'`)
		obigrep --without-progress-bar --id-list=<(cut -f 1 $DBFOLD/$DBCUT.taxonomy) $DBFOLD/$DBALIGN.fasta > $DBCHOP.pick.fasta
		mothur "#set.logfile(name=mothur.dbalign.logfile);
		pcr.seqs(fasta=$DBCHOP.pick.fasta, start=${CUT_POS[0]}, end=${CUT_POS[1]}, processors=$NCPUS);
		filter.seqs(processors=$NCPUS)"
		mv $DBCHOP.pick.pcr.filter.fasta $DBFOLD/$DBCHOP.fasta
		rm $DBCHOP.pick.*
	else
		echo "The align version of the database $DB was not found (expected directory: $DBFOLD , expected file name: $DBALIGN.fasta"
	fi
fi

# change permissions
find $DBFOLD -maxdepth 1 -type f -name "${DBCUT%.*}*" -exec chmod 664 {} +

echo END
